{"version":3,"sources":["../src/app.js"],"names":["app","port","process","env","PORT","frontend","path","join","__dirname","use","express","bodyParser","urlencoded","extended","json","AuthRoutes","UserRoutes","AdminRoutes","req","res","next","header","method","status","all","code","message","listen","console","log","server"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAVA;;AACA;AAWA,IAAMA,GAAG,GAAG,0BAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CAEA;;AACA,IAAMC,QAAQ,GAAGC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAjB;;AACAR,GAAG,CAACS,GAAJ,CAAQC,8BAAeL,QAAf,CAAR,E,CAGA;;AACAL,GAAG,CAACS,GAAJ,CAAQ,uBAAR;AACAT,GAAG,CAACS,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AACAT,GAAG,CAACS,GAAJ,CAAQE,uBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAb,GAAG,CAACS,GAAJ,CAAQE,uBAAWG,IAAX,EAAR;AACAd,GAAG,CAACS,GAAJ,CAAQC,8BAAe,QAAf,CAAR;AACAV,GAAG,CAACS,GAAJ,CAAQ,cAAR,EAAwBM,sBAAxB;AACAf,GAAG,CAACS,GAAJ,CAAQ,wBAAR,EAAkCO,sBAAlC;AACAhB,GAAG,CAACS,GAAJ,CAAQ,wBAAR,EAAkCQ,uBAAlC,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAjB,GAAG,CAACS,GAAJ,CAAQ,GAAR,EAAa,UAACS,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/BD,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CACE,8BADF,EAEE,2DAFF;;AAIA,MAAIH,GAAG,CAACI,MAAJ,KAAe,SAAnB,EAA8B;AAC5BH,IAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,2BAA3C;AACA,WAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB,EAArB,CAAP;AACD;;AACD,SAAOM,IAAI,EAAX;AACD,CAXD,E,CAcA;;AACApB,GAAG,CAACwB,GAAJ,CAAQ,GAAR,EAAa,UAACN,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqB;AAC9CS,IAAAA,MAAM,EAAE,OADsC;AAE9CE,IAAAA,IAAI,EAAE,GAFwC;AAG9CC,IAAAA,OAAO,EAAE;AAHqC,GAArB,CAAd;AAAA,CAAb,E,CAMA;;AACA1B,GAAG,CAAC2B,MAAJ,CAAW1B,IAAX,EAAiB,YAAM;AACrB2B,EAAAA,OAAO,CAACC,GAAR,4CAAgD5B,IAAhD;AACD,CAFD;AAIO,IAAM6B,MAAM,GAAG9B,GAAf;;eACQA,G","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-console */\r\n\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport cors from 'cors';\r\nimport logger from 'morgan';\r\nimport path from 'path';\r\nimport AuthRoutes from './routes/authRoutes';\r\nimport UserRoutes from './routes/userRoutes';\r\nimport AdminRoutes from './routes/adminRoutes';\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3010;\r\n\r\n// Render frontend\r\nconst frontend = path.join(__dirname, '../public');\r\napp.use(express.static(frontend));\r\n\r\n\r\n// Middlewares\r\napp.use(cors());\r\napp.use(logger('dev'));\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\napp.use(express.static('public'));\r\napp.use('/api/v1/auth', AuthRoutes);\r\napp.use('/api/v1/users/requests', UserRoutes);\r\napp.use('/api/v1/admin/requests', AdminRoutes);\r\n\r\n// Test good route\r\n// app.get('/', (req, res) => {\r\n//   res.status(200).json(\r\n//     {\r\n//       message: 'welcome to the maintenance tracker app api/v1',\r\n//     },\r\n//   );\r\n// });\r\n\r\n// CORS POLICY\r\napp.use('*', (req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header(\r\n    'Access-Control-Allow-Headers',\r\n    'Origin,X-Requested-With,Content-Type,Accept,Authorization',\r\n  );\r\n  if (req.method === 'OPTIONS') {\r\n    res.header('Access-Control-Allow-Headers', 'PUT,DELETE,GET,PATCH,POST');\r\n    return res.status(200).json({});\r\n  }\r\n  return next();\r\n});\r\n\r\n\r\n// Invalid Routes\r\napp.all('*', (req, res) => res.status(404).json({\r\n  status: 'error',\r\n  code: 404,\r\n  message: 'Route unavailable on server.',\r\n}));\r\n\r\n// Server Host\r\napp.listen(port, () => {\r\n  console.log(`SERVER IS UP AND RUNNING ON PORT ${port}`);\r\n});\r\n\r\nexport const server = app;\r\nexport default app;\r\n"],"file":"app.js"}