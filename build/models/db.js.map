{"version":3,"sources":["../../src/models/db.js"],"names":["pg","require","dotenv","config","connectionString","user","process","env","DB_USER","port","DB_PORT","host","DB_HOST","password","DB_PASSWORD","database","DB_DATABASE","pool","Pool","on","err","console","error","query","result","log","rows","theTime","end","createRequestsTable","queryText","createUserTable"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;AACA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAGAC,MAAM,CAACC,MAAP,G,CAEA;AACA;AACA;;AAEA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,OADK;AAEvBC,EAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG,OAFK;AAGvBC,EAAAA,IAAI,EAAEL,OAAO,CAACC,GAAR,CAAYK,OAHK;AAIvBC,EAAAA,QAAQ,EAAEP,OAAO,CAACC,GAAR,CAAYO,WAJC;AAKvBC,EAAAA,QAAQ,EAAET,OAAO,CAACC,GAAR,CAAYS;AALC,CAAzB,C,CAOA;;AACA,IAAMC,IAAI,GAAG,IAAIjB,EAAE,CAACkB,IAAP,CAAYd,gBAAZ,CAAb;AAEAa,IAAI,CAACE,EAAL,CAAQ,SAAR,EAAmB,UAACC,GAAD,EAAS;AAC1B,MAAIA,GAAJ,EAAS;AACP,WAAOC,OAAO,CAACC,KAAR,CAAc,+BAAd,CAAP;AACD;;AACDL,EAAAA,IAAI,CAACM,KAAL,CAAW,2BAAX,EAAwC,UAACC,MAAD,EAAY;AAClDH,IAAAA,OAAO,CAACI,GAAR,CAAYD,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeC,OAA3B,EADkD,CAElD;;AACAV,IAAAA,IAAI,CAACW,GAAL;AACD,GAJD;AAKD,CATD;;AAWA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,UAAAA,SADoB;AAAA;AAAA;AAAA,+CAWlBb,IAAI,CAACM,KAAL,CAAWO,SAAX,CAXkB;;AAAA;AAYxBT,UAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ;AAZwB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAmBA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBD,UAAAA,SADgB;AAAA;AAAA;AAAA,+CASdb,IAAI,CAACM,KAAL,CAAWO,SAAX,CATc;;AAAA;AAUpBT,UAAAA,OAAO,CAACI,GAAR,CAAY,oBAAZ;AAVoB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAI,mBAAmB,G,CACnB;;AACAE,eAAe,G,CAEf;AACA;;eAEed,I","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-console */\r\nconst pg = require('pg');\r\nconst dotenv = require('dotenv');\r\n\r\n\r\ndotenv.config();\r\n\r\n// if (process.env.NODE_ENV === 'production') {\r\n//   const connectionString = process.env.DB_URL;\r\n// }\r\n\r\nconst connectionString = {\r\n  user: process.env.DB_USER,\r\n  port: process.env.DB_PORT,\r\n  host: process.env.DB_HOST,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_DATABASE,\r\n};\r\n// const connectionString = process.env.DB_URL;\r\nconst pool = new pg.Pool(connectionString);\r\n\r\npool.on('connect', (err) => {\r\n  if (err) {\r\n    return console.error('Couldn\\'t connect to database');\r\n  }\r\n  pool.query('SELECT NOW() AS \"theTime\"', (result) => {\r\n    console.log(result.rows[0].theTime);\r\n    // >> output: 2018-08-23T14:02:57.117Z\r\n    pool.end();\r\n  });\r\n});\r\n\r\nconst createRequestsTable = async () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS requests(requestId SERIAL PRIMARY KEY UNIQUE,\r\n      title VARCHAR(128) NOT NULL,\r\n      itemType VARCHAR(200) NOT NULL ,\r\n      description VARCHAR(250) NOT NULL,\r\n      category VARCHAR(200) NOT NULL,\r\n      status VARCHAR(25) NOT NULL,\r\n      created_at DATE NOT NULL,\r\n      userId INT NOT NULL,\r\n      FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE)`;\r\n  try {\r\n    await pool.query(queryText);\r\n    console.log('Table created');\r\n  } catch (e) {\r\n    // pool.end();\r\n  }\r\n};\r\n\r\n\r\nconst createUserTable = async () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n  users(userId SERIAL PRIMARY KEY UNIQUE,\r\n      email VARCHAR(250) NOT NULL UNIQUE,\r\n      firstname VARCHAR(150) NOT NULL,\r\n      lastname VARCHAR(150) NOT NULL,\r\n      password VARCHAR(150) NOT NULL\r\n    )`;\r\n  try {\r\n    await pool.query(queryText);\r\n    console.log('user table created');\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n// const insertRequest = async () => {\r\n// eslint-disable-next-line max-len\r\n//   const queryText = 'INSERT INTO requests(title, itemType,description, category, status, created_at) VALUES(\\'FanProblem\\',\\'Iron fan\\', \\'Fanbrokeovernight\\', \\'repair\\',\\'pending\\', NOW())';\r\n//   try {\r\n//     await pool.query(queryText);\r\n//     console.log('Inserted');\r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// const insertUser = async () => {\r\n// eslint-disable-next-line max-len\r\n//   const queryText = 'INSERT INTO users(email, firstname, lastname, password) VALUES(\\'adebayorilerioluwa@gmail.com\\',\\'Ilerioluwa\\', \\'Adebayo\\', \\'adeilerioluwa\\' )';\r\n//   try {\r\n//     await pool.query(queryText);\r\n//     console.log('User Inserted');\r\n//   } catch (error) {\r\n//     console.error(error);\r\n//   }\r\n// };\r\n\r\n// const dropTable = async () => {\r\n//   try {\r\n//     const query = 'DROP TABLE IF EXISTS requests';\r\n//     await pool.query(query);\r\n//     console.log('Table dropped');\r\n//   } catch (e) {\r\n//     pool.end();\r\n//   }\r\n// };\r\n\r\n\r\ncreateRequestsTable();\r\n// insertRequest();\r\ncreateUserTable();\r\n\r\n// insertUser();\r\n// dropTable();\r\n\r\nexport default pool;\r\n"],"file":"db.js"}