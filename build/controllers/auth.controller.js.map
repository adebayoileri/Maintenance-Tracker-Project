{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["authController","req","res","body","firstname","lastname","email","password","userExistsCheck","value","pool","query","checkResult","status","json","message","bcrypt","genSalt","salt","hash","hashedPassword","rows","signUpUser","values","newUser","jwt","sign","process","env","JWT_KEY","expiresIn","error","token","user","loginUser","length","matchedPassword","compareSync","userId","userid","userData"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable consistent-return */\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport pool from '../models/db';\r\n\r\n\r\nclass authController {\r\n  static async signUp(req, res) {\r\n    const {\r\n      firstname, lastname, email, password,\r\n    } = req.body;\r\n    try {\r\n      const userExistsCheck = 'SELECT * FROM users WHERE email=$1';\r\n      const value = [email];\r\n      const checkResult = await pool.query(userExistsCheck, value);\r\n\r\n      if (!firstname || !lastname || !password) {\r\n        return res.status(400).json({\r\n          message: 'Input all required fields',\r\n        });\r\n      }\r\n\r\n      // Password Hashing Process\r\n      const salt = await bcrypt.genSalt(10);\r\n      const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n      if (checkResult.rows[0]) {\r\n        res.status(400).json({\r\n          message: 'email already exists',\r\n        });\r\n      } else {\r\n        const signUpUser = 'INSERT INTO users(email, firstname, lastname, password) VALUES($1,$2,$3,$4) RETURNING *';\r\n        const values = [email, firstname, lastname, hashedPassword];\r\n        const newUser = await pool.query(signUpUser, values);\r\n\r\n        // Token Generation\r\n        jwt.sign({ email, password }, process.env.JWT_KEY, { expiresIn: '24h' }, (error, token) => {\r\n          res.status(201).json({\r\n            user: newUser.rows[0],\r\n            token,\r\n          });\r\n        });\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async login(req, res) {\r\n    const { email, password } = req.body;\r\n    try {\r\n      const loginUser = 'SELECT * FROM users WHERE email=$1';\r\n      const value = [email];\r\n      const user = await pool.query(loginUser, value);\r\n      if (!user.rows.length) {\r\n        res.status(403).json({ message: 'This email doesn\\'t seem to exists on our server. Signup if you haven\\'t' });\r\n      }\r\n      const matchedPassword = bcrypt.compareSync(password, user.rows[0].password);\r\n\r\n      if (matchedPassword) {\r\n        jwt.sign({ email, password }, process.env.JWT_KEY, { expiresIn: '24h' }, (error, token) => {\r\n          res.status(200).json({\r\n            message: 'Login Successful',\r\n            token,\r\n            userId: user.rows[0].userid,\r\n            userData: user.rows[0],\r\n          });\r\n        });\r\n      } else {\r\n        res.status(403).json({\r\n          message: 'Invalid password Pls try again',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default authController;\r\n"],"file":"auth.controller.js"}