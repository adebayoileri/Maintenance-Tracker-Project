{"version":3,"sources":["../../src/controllers/admin.controller.js"],"names":["adminController","req","res","queryText","pool","query","requests","rows","length","status","json","message","requestId","params","value","request","statusApprove","values","approvedRequest","statusDisapprove","disapprovedRequest","statusResolved","resolvedRequest"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n\r\nimport pool from '../models/db';\r\n\r\nclass adminController {\r\n  static async getAllUserRequests(req, res) {\r\n    try {\r\n      const queryText = 'SELECT * FROM requests';\r\n      const requests = await pool.query(queryText);\r\n      if (!requests.rows.length) return res.status(400).json('No Requests Found');\r\n      return res.status(200).json({ message: 'get all requests to admin successful' });\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async approveRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    const status = 'approved';\r\n    try {\r\n      const queryText = 'SELECT * FROM requests WHERE requestId=$1';\r\n      const value = [requestId];\r\n      const request = await pool.query(queryText, value);\r\n      if (!request.rows.length) { return res.status(400).json('No request associated with this ID'); }\r\n\r\n      const statusApprove = 'UPDATE requests SET status=$1 WHERE requestId=$2';\r\n      const values = [status, requestId];\r\n      const approvedRequest = await pool.query(statusApprove, values);\r\n      return res.status(200).json(\r\n        {\r\n          message: `Approved request with id ${requestId} successfully`,\r\n          approvedRequest: approvedRequest.rows[0],\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async disapproveRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    const status = 'disapproved';\r\n    try {\r\n      const queryText = 'SELECT * FROM requests WHERE requestId=$1';\r\n      const value = [requestId];\r\n      const request = await pool.query(queryText, value);\r\n      if (!request.rows.length) { return res.status(400).json('No request associated with this ID'); }\r\n\r\n      const statusDisapprove = 'UPDATE requests SET status=$1 WHERE requestId=$2';\r\n      const values = [status, requestId];\r\n      const disapprovedRequest = await pool.query(statusDisapprove, values);\r\n      return res.status(200).json({\r\n        message: `Disapproved request with id ${requestId} successfully`,\r\n        disapprovedRequest: disapprovedRequest.rows[0],\r\n      });\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async resolveRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    const status = 'resolved';\r\n    try {\r\n      const queryText = 'SELECT * FROM requests WHERE requestId=$1';\r\n      const value = [requestId];\r\n      const request = await pool.query(queryText, value);\r\n      if (!request.rows.length) { return res.status(400).json('No request associated with this ID'); }\r\n\r\n      const statusResolved = 'UPDATE requests SET status=$1 WHERE requestId=$2';\r\n      const values = [status, requestId];\r\n      const resolvedRequest = await pool.query(statusResolved, values);\r\n      return res.status(200).json(\r\n        { message: `Resolved request with id ${requestId} successfully`, resolvedRequest: resolvedRequest.rows[0] },\r\n      );\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\nexport default adminController;\r\n"],"file":"admin.controller.js"}