{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userController","req","res","userId","body","queryText","value","pool","query","requests","rows","length","status","json","message","requestId","params","request","id","title","description","itemType","category","values","updatedRequest","code","send","newRequest","deletedRequest","rowCount"],"mappings":"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","sourcesContent":["/* eslint-disable linebreak-style */\r\n\r\nimport pool from '../models/db';\r\n\r\nclass userController {\r\n  static async getAllRequests(req, res) {\r\n    const { userId } = req.body;\r\n    try {\r\n      const queryText = 'SELECT * FROM requests WHERE userId=$1';\r\n      const value = [userId];\r\n      const requests = await pool.query(queryText, value);\r\n      if (!requests.rows.length) return res.status(400).json('No Requests Found');\r\n      return res.status(200).json(\r\n        {\r\n          message: 'GET request successful',\r\n          requests: requests.rows,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async getSingleRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    const queryText = 'SELECT * FROM requests WHERE requestId=$1';\r\n    const value = [requestId];\r\n    const request = await pool.query(queryText, value);\r\n    if (!request.rows.length) return res.status(400).json('No request associated is with this id');\r\n    return res.status(200).json({\r\n      message: 'GET a specific request successful',\r\n      id: requestId,\r\n      request: request.rows[0],\r\n    });\r\n  }\r\n\r\n  static async updateRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    try {\r\n      const queryText = 'SELECT * FROM requests WHERE requestId=$1';\r\n      const value = [requestId];\r\n      const request = await pool.query(queryText, value);\r\n      if (!request.rows.length) { return res.status(404).json('No request associated with this ID'); }\r\n      // const response = request.rows[0];\r\n\r\n      const {\r\n        title, description, itemType, status, category,\r\n      } = req.body;\r\n\r\n      const query = 'UPDATE requests SET title=$1,description=$2,itemType=$3,status=$4,category=$5,created_at=NOW() WHERE requestId=$6 RETURNING *';\r\n      const values = [title, description, itemType, status, category, requestId];\r\n      const updatedRequest = await pool.query(query, values);\r\n      return res.status(200).json({\r\n        message: 'Request updated successfully',\r\n        code: 200,\r\n        request: updatedRequest.rows,\r\n      });\r\n    } catch (e) {\r\n      return res.status(400).send({\r\n        message: `Cannot update request with id ${requestId} because it doesn't exist on our server.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async createRequest(req, res) {\r\n    const {\r\n      title, description, category, itemType, userId,\r\n    } = req.body;\r\n    if (!title) return res.status(404).json('Input all fields');\r\n    const status = 'pending';\r\n    try {\r\n      const queryText = 'INSERT INTO requests (title, description, category, status, created_at, itemType, userId) VALUES($1,$2,$3,$4,NOW(),$5,$6) RETURNING *';\r\n      const values = [title, description, category, status, itemType, userId];\r\n      const newRequest = await pool.query(queryText, values);\r\n      return res.status(201).json({\r\n        message: 'Request Created',\r\n        code: 201,\r\n        newRequest: newRequest.rows,\r\n      });\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  static async deleteRequest(req, res) {\r\n    const { requestId } = req.params;\r\n    try {\r\n      const queryText = 'DELETE FROM requests WHERE requestId=$1';\r\n      const value = [requestId];\r\n      const deletedRequest = await pool.query(queryText, value);\r\n      if (!deletedRequest.rowCount) return res.status(404).json('No request is associated with this ID');\r\n\r\n      return res.status(200).json({\r\n        message: 'Item requested successfully deleted',\r\n        id: `${requestId} was deleted`,\r\n        code: 200,\r\n        status: 'success',\r\n      });\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default userController;\r\n"],"file":"user.controller.js"}